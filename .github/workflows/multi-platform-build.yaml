name: Multi-Platform Build

on:
  push:
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:

jobs:
  # XLSX工具构建 (轻量级依赖)
  build-xlsx-tools:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x64 build
          - os: ubuntu-22.04
            arch: x64
            platform: linux-x64
            setup_python_arch: x64
          # Linux ARM64 build (官方支持，2025年1月公共仓库免费)
          - os: ubuntu-22.04-arm
            arch: arm64
            platform: linux-arm64
            setup_python_arch: arm64
          # Windows builds
          - os: windows-2022
            arch: x64
            platform: windows-x64
            setup_python_arch: x64
          # macOS builds
          - os: macos-15
            arch: arm64
            platform: macos-arm64
            setup_python_arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: ${{ matrix.setup_python_arch }}

      - name: Set commit version
        id: version
        run: |
          VERSION=$(git log --format=%B -1 | head -1)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller openpyxl argparse configparser

      - name: Build XLSX-split
        run: |
          pyinstaller --onefile --hidden-import=csv,os,codecs,configparser,argparse,openpyxl --strip scripts/XLSX-split.py --distpath dist/${{ matrix.platform }}

      - name: Build XLSX-SheetCutter  
        run: |
          pyinstaller --onefile --hidden-import=sys,os,openpyxl --strip scripts/XLSX-SheetCutter.py --distpath dist/${{ matrix.platform }}

      - name: Build XLSX-SheetMerger
        run: |
          pyinstaller --onefile --hidden-import=sys,os,openpyxl --strip scripts/XLSX-SheetMerger.py --distpath dist/${{ matrix.platform }}

      # 单独上传每个XLSX工具 (文件名_py-架构-版本号)
      - name: Upload XLSX-split
        uses: actions/upload-artifact@v4
        with:
          name: XLSX-split_py-${{ matrix.platform }}-${{ steps.version.outputs.version }}
          path: dist/${{ matrix.platform }}/XLSX-split*
          compression-level: 0

      - name: Upload XLSX-SheetCutter
        uses: actions/upload-artifact@v4
        with:
          name: XLSX-SheetCutter_py-${{ matrix.platform }}-${{ steps.version.outputs.version }}
          path: dist/${{ matrix.platform }}/XLSX-SheetCutter*
          compression-level: 0

      - name: Upload XLSX-SheetMerger
        uses: actions/upload-artifact@v4
        with:
          name: XLSX-SheetMerger_py-${{ matrix.platform }}-${{ steps.version.outputs.version }}
          path: dist/${{ matrix.platform }}/XLSX-SheetMerger*
          compression-level: 0

  # XDB主程序构建 (重型依赖)
  build-xdb:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x64 build
          - os: ubuntu-22.04
            arch: x64
            platform: linux-x64
            setup_python_arch: x64
          # Linux ARM64 build (官方支持，2025年1月公共仓库免费)
          - os: ubuntu-22.04-arm
            arch: arm64
            platform: linux-arm64
            setup_python_arch: arm64
          # Windows builds
          - os: windows-2022
            arch: x64
            platform: windows-x64
            setup_python_arch: x64
          # macOS builds
          - os: macos-15
            arch: arm64
            platform: macos-arm64
            setup_python_arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: ${{ matrix.setup_python_arch }}

      - name: Set commit version
        id: version
        run: |
          VERSION=$(git log --format=%B -1 | head -1)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller pandas openpyxl pymysql tqdm psutil chardet

      - name: Build XDB
        run: |
          pyinstaller --onefile --hidden-import=pandas,openpyxl,pymysql,tqdm,psutil,chardet,concurrent.futures,multiprocessing --strip XDB.py --distpath dist/${{ matrix.platform }}

      - name: Upload XDB
        uses: actions/upload-artifact@v4
        with:
          name: XDB_py-${{ matrix.platform }}-${{ steps.version.outputs.version }}
          path: dist/${{ matrix.platform }}/*
          compression-level: 0

  # 同平台全套工具打包 (XDB-all)
  create-platform-bundles:
    needs: [build-xlsx-tools, build-xdb]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        platform: [linux-x64, linux-arm64, windows-x64, macos-arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set commit version
        id: version
        run: |
          VERSION=$(git log --format=%B -1 | head -1)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      # 下载该平台的所有工具
      - name: Download XLSX tools for platform
        uses: actions/download-artifact@v4
        with:
          pattern: XLSX-*_py-${{ matrix.platform }}-*
          path: platform-bundle/
          merge-multiple: true

      - name: Download XDB for platform
        uses: actions/download-artifact@v4
        with:
          name: XDB_py-${{ matrix.platform }}-${{ steps.version.outputs.version }}
          path: platform-bundle/

      # 上传平台全套包 (ALL-仓库名字-架构-版本号)
      - name: Upload XDB Platform Bundle
        uses: actions/upload-artifact@v4
        with:
          name: ALL-XDB-${{ matrix.platform }}-${{ steps.version.outputs.version }}
          path: platform-bundle/*
          compression-level: 0

  # 全平台合集打包
  create-release-bundle:
    needs: [create-platform-bundles]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set commit version
        id: version
        run: |
          VERSION=$(git log --format=%B -1 | head -1)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      # 下载所有ALL-XDB平台包
      - name: Download all ALL-XDB platform bundles
        uses: actions/download-artifact@v4
        with:
          pattern: ALL-XDB-*
          path: release-bundle/
          merge-multiple: false

      # 创建完整发布包
      - name: Create complete release bundle
        run: |
          mkdir -p complete-release
          # 重新组织目录结构
          for platform in linux-x64 linux-arm64 windows-x64 macos-arm64; do
            mkdir -p "complete-release/$platform"
            
            # 复制ALL-XDB平台包 (包含所有4个工具)
            if [ -d "release-bundle/ALL-XDB-$platform-${{ steps.version.outputs.version }}" ]; then
              cp -r "release-bundle/ALL-XDB-$platform-${{ steps.version.outputs.version }}/"* "complete-release/$platform/"
            fi
          done

      - name: Upload Complete Release Bundle
        uses: actions/upload-artifact@v4
        with:
          name: FULL-XDB-${{ steps.version.outputs.version }}
          path: complete-release/*
          compression-level: 0

  # Release发布 (仅在release触发时执行)
  publish-release:
    if: github.event_name == 'release'
    needs: [create-release-bundle]
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set commit version
        id: version
        run: |
          VERSION=$(git log --format=%B -1 | head -1)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      # 下载所有单独程序artifacts
      - name: Download all single program artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: XLSX-*_py-*
          path: release-assets/single/
          merge-multiple: false

      - name: Download XDB single program artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: XDB_py-*
          path: release-assets/single/
          merge-multiple: false

      # 下载完整发布包
      - name: Download complete release bundle
        uses: actions/download-artifact@v4
        with:
          name: FULL-XDB-${{ steps.version.outputs.version }}
          path: release-assets/complete/

      # 创建平台ZIP包 (统一ZIP格式，避免双重压缩)
      - name: Create platform-specific archives
        run: |
          cd release-assets/complete
          for platform in linux-x64 linux-arm64 windows-x64 macos-arm64; do
            if [ -d "$platform" ]; then
              zip -r "../xdb-$platform-${{ steps.version.outputs.version }}.zip" "$platform"/*
            fi
          done

      # 上传到Release (统一ZIP格式)
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*.zip
          name: "XDB Release ${{ steps.version.outputs.version }}"
          body: |
            ## XDB Multi-Platform Release ${{ steps.version.outputs.version }}
            
            ### 📦 支持的平台
            - **Linux x64**: `xdb-linux-x64-${{ steps.version.outputs.version }}.zip`
            - **Linux ARM64**: `xdb-linux-arm64-${{ steps.version.outputs.version }}.zip`
            - **Windows x64**: `xdb-windows-x64-${{ steps.version.outputs.version }}.zip`
            - **macOS ARM64**: `xdb-macos-arm64-${{ steps.version.outputs.version }}.zip`
            
            ### 🛠️ 包含工具
            - **XDB**: Excel/CSV转SQLite/MySQL工具
            - **XLSX-split**: Excel工作表分割工具
            - **XLSX-SheetCutter**: Excel工作表切割工具
            - **XLSX-SheetMerger**: Excel工作表合并工具
            
            每个压缩包包含对应平台的所有4个工具的可执行文件。
          tag_name: ${{ github.ref }}
